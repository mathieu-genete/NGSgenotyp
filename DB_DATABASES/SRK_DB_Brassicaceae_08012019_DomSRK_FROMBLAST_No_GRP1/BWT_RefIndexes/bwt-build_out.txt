Settings:
  Output files: "/gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/BWT_RefIndexes/BoSRK12_AB180901_1.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/REF/BoSRK12_AB180901_1.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 324
Using parameters --bmax 243 --dcv 1024
  Doing ahead-of-time memory usage tes    Passed!  Constructing with these parameters: --bmax 242 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:01
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 184.429 (target: 242)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 112
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 113
Getting block 2 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 220
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221
Getting block 3 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 152
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 153
Getting block 4 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 192
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 193
Getting block 5 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 207
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 208
Getting block 6 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 188
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 189
Getting block 7 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4194869 bytes to primary EBWT file: /gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/BWT_RefIndexes/CgrSRK06_DQExiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4194932 bytes to primary EBWT file: /gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/BWT_RefIndexes/BoSRK12_AB180901_1.1.bt2
Wrote 332 bytes to secondary EBWT file: /gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/BWT_RefIndexes/BoSRK12_AB180901_1.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1297
    bwtLen: 1298
    sz: 325
    bwtSz: 325
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 82
    offsSz: 328
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7
    numLines: 7
    ebwtTotLen: 448
    ebwtTotSz: 448
    color  Passed!  Constructing with these parameters: --bmax 249 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsso  Passed!  Constructing with these parameters: --bmax 108 --dcv 1024
Constructing suffix-array element generator
B  Passed!  Constructing with these parameters: --bmax 243 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 184.429 (target: 242)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 169
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 170
Getting block 2 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 175
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 176
Getting block 3 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 241
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 242
Getting block 4 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 209
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 210
Getting block 5 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 155
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 156
Getting block 6 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 121
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 122
Getting block 7 of 7
  Reserving size (243) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 221
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 222
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 352
fchr[G]: 635
fchr[T]: 948
fchr[$]: 1297
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4194932 bytes to primary EBWT file: /gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/BWT_RefIndexes/BoSRK12_AB180901_1.rev.1.bt2
Wrote 332 bytes to secondary EBWT file: /gepv/home2/mathieu/tools/NGSgenotyp/DB_DATABASES/SRK_DB_Brassicaceae_08012019_DomSRK_FROMBLAST_No_GRP1/BWT_RefIndexes/BoSRK12_AB180901_1.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1297
    bwtLen: 1298
    sz: 325
    bwtSz: 325
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 82
    offsSz: 328
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7
    numLines: 7
    ebwtTotLen: 448
    ebwtTotSz: 448
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
ineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3
    numLines: 3
    ebwtTotLen: 192
    ebwtTotSz: 192
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
   ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 81
    offsSz: 324
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7
    numLines: 7
    ebwtTotLen: 448
    ebwtTotSz: 448
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
0
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 35
    offsSz: 140
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3
    numLines: 3
    ebwtTotLen: 192
    ebwtTotSz: 192
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
77
    ftabSz: 4194308
    offsLen: 63
    offsSz: 252
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 6
    numLines: 6
    ebwtTotLen: 384
    ebwtTotSz: 384
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
neSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7
    numLines: 7
    ebwtTotLen: 448
    ebwtTotSz: 448
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
 sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 4
    numLines: 4
    ebwtTotLen: 256
    ebwtTotSz: 256
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
k: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 62
    offsSz: 248
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 6
    numLines: 6
    ebwtTotLen: 384
    ebwtTotSz: 384
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:02
